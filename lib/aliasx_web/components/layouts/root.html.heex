<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />
    <meta name="csrf-token" content={get_csrf_token()} />
    <link
      rel="icon"
      href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>üçø</text></svg>"
    />
    <.live_title default="Alias X" suffix="">
      {assigns[:page_title]}
    </.live_title>
    
<!-- Primary Meta Tags -->
    <meta name="title" content="Alias X" />
    <meta
      name="description"
      content="Create a game session and invite your friends to play the classic word-guessing game Alias online!"
    />
    
<!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://aliasx.app/" />
    <meta property="og:title" content="Alias X" />
    <meta
      property="og:description"
      content="Create a game session and invite your friends to play the classic word-guessing game Alias online!"
    />
    <meta property="og:image" content="https://aliasx.app/images/logo.png" />
    
<!-- X (Twitter) -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content="https://aliasx.app/" />
    <meta property="twitter:title" content="Alias X" />
    <meta
      property="twitter:description"
      content="Create a game session and invite your friends to play the classic word-guessing game Alias online!"
    />
    <meta property="twitter:image" content="https://aliasx.app/images/logo.png" />

    <link phx-track-static rel="stylesheet" href={~p"/assets/css/app.css"} />
    <script defer phx-track-static type="text/javascript" src={~p"/assets/js/app.js"}>
    </script>
    <script>
      (() => {
        const setTheme = (theme) => {
          if (theme === "system") {
            sessionStorage.removeItem("phx:theme");
            document.documentElement.removeAttribute("data-theme");
          } else {
            sessionStorage.setItem("phx:theme", theme);
            document.documentElement.setAttribute("data-theme", theme);
          }
        };
        if (!document.documentElement.hasAttribute("data-theme")) {
          setTheme(sessionStorage.getItem("phx:theme") || "system");
        }
        // Note: sessionStorage doesn't trigger storage events on the same tab, so we don't need this listener
        
        window.addEventListener("phx:set-theme", (e) => setTheme(e.target.dataset.phxTheme));
      })();
    </script>
    <!-- Yandex.Metrika counter -->
    <script type="text/javascript">
      (function(m,e,t,r,i,k,a){
          m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
          m[i].l=1*new Date();
          for (var j = 0; j < document.scripts.length; j++) {if (document.scripts[j].src === r) { return; }}
          k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)
      })(window, document,'script','https://mc.yandex.ru/metrika/tag.js?id=104060414', 'ym');

      ym(104060414, 'init', {ssr:true, webvisor:true, clickmap:true, ecommerce:"dataLayer", accurateTrackBounce:true, trackLinks:true});
    </script>
    <noscript>
      <div>
        <img
          src="https://mc.yandex.ru/watch/104060414"
          style="position:absolute; left:-9999px;"
          alt=""
        />
      </div>
    </noscript>
    <!-- /Yandex.Metrika counter -->
  </head>
  <body>
    <!-- Navigation Bar -->
    <div class="navbar bg-base-100 shadow-lg" id="nav-bar">
      <div class="navbar-start">
        <a
          href="/"
          class="btn btn-ghost btn-circle"
          title="Go Home"
          id="home-nav-btn"
        >
          <!-- Left arrow icon -->
          <svg
            class="w-6 h-6"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M15 19l-7-7 7-7"
            >
            </path>
          </svg>
        </a>
      </div>
      <div class="navbar-center">
        <span class="text-xl font-semibold">Alias Game</span>
      </div>
      <div class="navbar-end">
        <button
          class="btn btn-ghost btn-circle"
          data-phx-theme="dark"
          phx-click={JS.dispatch("phx:set-theme")}
          title="Toggle Dark Mode"
          id="theme-toggle"
        >
          <!-- Sun icon for light mode (shown when dark mode would be activated) -->
          <svg
            class="w-6 h-6 theme-icon-light"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
            >
            </path>
          </svg>
          <!-- Moon icon for dark mode (shown when light mode would be activated) -->
          <svg
            class="w-6 h-6 theme-icon-dark"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
            >
            </path>
          </svg>
        </button>
      </div>
    </div>
    
    {@inner_content}

    <script>
      // Theme toggle button logic
      (() => {
        const updateThemeButton = () => {
          const button = document.getElementById('theme-toggle');
          if (!button) return;
          
          const currentTheme = document.documentElement.getAttribute('data-theme');
          const isDark = currentTheme === 'dark';
          
          // Update button data attribute for next click
          button.dataset.phxTheme = isDark ? 'light' : 'dark';
          
          // Show/hide appropriate icon
          const lightIcon = button.querySelector('.theme-icon-light');
          const darkIcon = button.querySelector('.theme-icon-dark');
          
          if (isDark) {
            lightIcon.style.display = 'block';
            darkIcon.style.display = 'none';
            button.title = 'Switch to Light Mode';
          } else {
            lightIcon.style.display = 'none';
            darkIcon.style.display = 'block';
            button.title = 'Switch to Dark Mode';
          }
        };
        
        // Update button when page loads
        document.addEventListener('DOMContentLoaded', updateThemeButton);
        
        // Update button when theme changes
        window.addEventListener('phx:set-theme', () => {
          setTimeout(updateThemeButton, 50); // Small delay to let theme apply
        });
        
        // Also update when storage changes (other tabs)
        window.addEventListener('storage', (e) => {
          if (e.key === 'phx:theme') {
            setTimeout(updateThemeButton, 50);
          }
        });
      })();

      // Navigation bar visibility logic
      (() => {
        const updateNavBarVisibility = () => {
          const navBar = document.getElementById('nav-bar');
          const homeNavBtn = document.getElementById('home-nav-btn');
          if (!navBar) return;
          
          // Hide entire navbar on home page (path is exactly "/")
          const isHomePage = window.location.pathname === '/';
          navBar.style.display = isHomePage ? 'none' : 'flex';
          
          // Update home button visibility within the navbar
          if (homeNavBtn) {
            homeNavBtn.style.visibility = isHomePage ? 'hidden' : 'visible';
          }
        };
        
        // Update visibility when page loads
        document.addEventListener('DOMContentLoaded', updateNavBarVisibility);
        
        // Update visibility on navigation changes (for LiveView navigation)
        window.addEventListener('phx:page-loading-stop', updateNavBarVisibility);
        
        // Also update on popstate (browser back/forward)
        window.addEventListener('popstate', updateNavBarVisibility);
      })();
    </script>
  </body>
</html>
